       title: "OpenC2 LED Display Actuator Profile"
      module: "http://oasis-open.org/openc2/blinky/v1.0"
 description: "Adapted from the OpenC2 Language Profile version 1.1"
     exports: ["OpenC2-Command", "OpenC2-Response"]

OpenC2-Command = Record                                // The Command defines an Action to be performed on a Target
   1 action           Action                           // The task or activity to be performed (i.e., the 'verb').
   2 target           Target                           // The object of the Action. The Action is performed on the Target.
   3 args             Args optional                    // Additional information that applies to the Command.
   4 actuator         Actuator optional                // The subject of the Action. The Actuator executes the Action on the Target.
   5 command_id       Command-ID optional              // An identifier of this Command.

OpenC2-Response = Record
   1 status           Status-Code                      // An integer status code.
   2 status_text      String optional                  // A free-form human-readable description of the Response status.
   3 results          Results optional                 // Map of key:value pairs that contain additional results based on the invoking Command.

Action = Enumerated
   3 query                                             // Initiate a request for information.
  15 set                                               // Change a value, configuration, or state of a managed entity.

Target = Choice
   9 features         Features                         // A set of items used with the query Action to determine an Actuator's capabilities.
2000 led/             LED-Target                       // Profile-defined targets

Args = Map{1..*}
   1 start_time       Date-Time optional               // The specific date/time to initiate the Command
   2 stop_time        Date-Time optional               // The specific date/time to terminate the Command
2000 led/             LED-Args optional                // Profile-defined command arguments

Actuator = Choice
2000 led/             LED-Specifiers                   // Actuator specifiers defined in this profile

Results = Map{1..*}                                    // Response Results
   1 versions         Version unique [0..10]           // List of OpenC2 language versions supported by this Actuator
   2 profiles         FieldName unique [0..*]          // List of profiles supported by this Actuator
   3 pairs            Action-Targets optional          // List of targets applicable to each supported Action
   4 rate_limit       Number{0.0..*} optional          // Maximum number of requests per minute supported by design or policy
   5 args             Enumerated(Enum[Args]) [0..*]    // List of supported Command Arguments
2000 led/             LED-Results optional             // Profile-defined response results

Action-Targets = Map                                   // Map of each action supported by this actuator to the list of targets applicable to that action.
   3 query            Target-query unique [2..2]
  15 set              Target-set-list

Target-query = Enumerated                              // All targets supported by this actuator's query command
   1 features
   2 led/device

Target-set-list = ArrayOf(Target-set){1..1} unique

Target-set = Enumerated                                // All targets supported by this actuator's set command
   1 led/display

LED-Target = Choice                                    // Profile-defined targets
   1 device           ArrayOf(Enum[Device]){1..*} unique// Device properties to return
   2 display          Display

LED-Args = Map{1..*}                                   // Profile-defined command arguments

LED-Specifiers = Map                                   // Profile-defined actuator specifiers

LED-Results = Map{1..*}                                // Profile-defined response results
   1 device           Device optional

Device = Map{1..*}                                     // Types of device parameters to return
   1 product          String optional                  // Descriptive name of actuator device
   2 resolution       String optional                  // width x height

Display = Choice                                       // Types of patterns to display
   1 predefined       Canned-Displays                  // Pre-defined patterns to display
   2 image            Artifact                         // Still image file
   3 animation        Artifact                         // Moving image file

Canned-Displays = Enumerated
   1 orange
   2 purple
   3 rainbow                                           // color-cycling
   4 space-invaders                                    // animation

Status-Code = Enumerated.ID
 102                                                   // Processing:: an interim Response used to inform the Producer that the Consumer has accepted the Command but has not yet completed it
 200                                                   // OK:: the Command has succeeded
 201                                                   // Created:: the Command has succeeded and a new resource has been created as a result of it
 400                                                   // Bad Request:: the Consumer cannot process the Command due to something that is perceived to be a Producer error (e.g., malformed Command syntax)
 401                                                   // Unauthorized:: the Command Message lacks valid authentication credentials for the target resource or authorization has been refused for the submitted credentials
 403                                                   // Forbidden:: the Consumer understood the Command but refuses to authorize it
 404                                                   // Not Found:: the Consumer has not found anything matching the Command
 500                                                   // Internal Error:: the Consumer encountered an unexpected condition that prevented it from performing the Command
 501                                                   // Not Implemented:: the Consumer does not support the functionality required to perform the Command
 503                                                   // Service Unavailable:: the Consumer is currently unable to perform the Command due to a temporary overloading or maintenance of the Consumer

Artifact = Record{1..*}
   1 mime_type        String optional                  // Permitted values specified in the IANA Media Types registry, [RFC6838]
   2 payload          Payload optional                 // Choice of literal content or URL
   3 hashes           Hashes optional                  // Hashes of the payload content

Features = ArrayOf(Feature){0..10} unique              // An array of zero to ten names used to query an Actuator for its supported capabilities.

URI = String /uri                                      // Uniform Resource Identifier, [RFC3986]

Date-Time = Integer{0..*}                              // Date and Time

Feature = Enumerated                                   // Specifies the results to be returned from a query features Command
   1 versions                                          // List of OpenC2 Language versions supported by this Actuator
   2 profiles                                          // List of profiles supported by this Actuator
   3 pairs                                             // List of supported Actions and applicable Targets
   4 rate_limit                                        // Maximum number of Commands per minute supported by design or policy
   5 args                                              // List of supported Command Argumemnts

Hashes = Map{1..*}                                     // Cryptographic hash values
   1 md5              Binary{16..16} /x optional       // MD5 hash as defined in [RFC1321]
   2 sha1             Binary{20..20} /x optional       // SHA1 hash as defined in [RFC6234]
   3 sha256           Binary{32..32} /x optional       // SHA256 hash as defined in [RFC6234]

Payload = Choice
   1 bin              Binary                           // Specifies the data contained in the artifact
   2 url              URI                              // MUST be a valid URL that resolves to the un-encoded content

Version = String                                       // Major.Minor version number

FieldName = String (%^[a-z][_A-Za-z0-9]{0,31}$%)       // Property name syntax, match $FieldName if configured

Command-ID = String (%^\S{0,36}$%)                     // Command Identifier
